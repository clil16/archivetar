#!/bin/bash

# Brock Palen
# Brockp@umich.edu
#
# http://arc-ts.umich.edu/

DATE=$(date '+%Y-%m-%d-%H')

# Default TAR options
TAROPTS=" --create --no-check-device "

#change if using tar not found in $PATH
# Or set $TAR
TAR="${TAR:-$(command -v tar)}"

#path to PIGZ Binary
PIGZ="${PIGZ:-$(command -v igz)}"

#path to PIGZ Binary
PBZIP="${PBZIP:-$(command -v lbzip2)}"

function usage {
      echo "Usage:"
      echo "  archivetar [options] -f <prefix>  <directory>"
      echo "    -h               Display this help message"
      echo "    -f <prefix>      Prefix of output tar Defaults to <directory>-YYYY-MM-DD-HH.tar"
      echo "    -j               Compress with bzip2"
      echo "    -z               Compress with gzip"
      echo "    -b               Create Backup using Incremental TAR"
      echo "    -v               Extra tar Messages"
      echo "    -d               Extra archivetar Messages"
      echo " "
      echo " Do not delete the <prefix>.snar file"
      echo " "
      echo "Envonrment Overrides:"
      echo "TAR                 tar executable to use Found: $TAR"
      echo "PIGZ                pigz executable to use Found: $PIGZ"
      echo "PBZIP               paralel bzip executable to use Found: $PBZIP"
      echo " "
      echo "Return Codes:"
      echo "0                   worked as expected"
      echo "1                   Invalid options or other error"
      echo "2                   files generated are not trustworthy"
}

while getopts ":hf:bvdzj" opt; do
  case ${opt} in
    f )
      PREFIX=$OPTARG
     ;;
    h )
      usage
      exit 0
      ;;
     z )
       GZIP="gzip"
      ;;
     j )
       BZIP="bzip"
      ;;
     b )
       BACKUP="backup"
      ;;
     v )
       VERBOSE="verbose"
      ;;
     d )
       DEBUG="debug"
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
    : )
          echo "Invalid Option: -$OPTARG requires an argument" 1>&2
          exit 1
          ;;
  esac
done
shift $((OPTIND -1))

TARGET=${@: -1}

# check if target exists
if [ ! -d $TARGET ]
then
   echo "$TARGET does not exist exiting" >&2
   echo " "
   usage
   exit 1
fi

if [ -z $PREFIX ]
then
   echo " -f <prefix> is a required option" 1>&2
   echo " "
   usage
   exit 1
fi

# compression checks

# both -z and -j cannot be given at the same time
if [ $GZIP ] && [ $BZIP ]
then
   echo " -z and -j are mutually exclusive" 1>&2
   echo " "
   usage
   exit 1
fi

if [ $GZIP ]
then
   #  if pigz is installed let's use it rather than serial gzip
   if [ $PIGZ ]
   then
      if [ $DEBUG ]
      then 
        echo "Found pigz (paralell gzip) at $PIGZ"
      fi
      TAROPTS="${TAROPTS} --use-compress-program=$PIGZ "
   else
      TAROPTS="${TAROPTS} --gzip "
   fi
   SUFFIX=".gz"
fi

if [ $BZIP ]
then
   #  if pigz is installed let's use it rather than serial gzip
   if [ $PBZIP ]
   then
      if [ $DEBUG ]
      then
        echo "Found lbzip2/pbzip (paralell gzip) at $PBZIP"
      fi
      TAROPTS="${TAROPTS} --use-compress-program=$PBZIP "
   else
      TAROPTS="${TAROPTS} --bzip2 "
   fi
   SUFFIX=".bz2"
fi

if [ $BACKUP ]
then
    SNAR=${PREFIX}.snar
    
    echo "  DO NOT delete $SNAR it is required to perform incrementals"
    echo "  See: http://www.gnu.org/software/tar/manual/html_node/Incremental-Dumps.html"

    TAROPTS="${TAROPTS} --listed-incremental=${SNAR} "
fi


# if verbose pass two to tar to print all files being archived
if [ $VERBOSE ]
then
    TAROPTS="${TAROPTS} --verbose --verbose "
fi

FULLCMD="$TAR $TAROPTS --file=${PREFIX}.tar${SUFFIX} $TARGET"

if [ $DEBUG ]
then
    echo "Command to run:"
    echo "$FULLCMD"
fi


######  Actaully run the big tar
#$FULLCMD

if [ $? -ne 0 ]
then
  echo "tar exited with an error cannot confirm data" 1>&2
fi
